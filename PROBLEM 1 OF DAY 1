#include <stdio.h>
#include <stdlib.h>

// Define the structure for a print job
typedef struct PrintJob {
    int jobId;
    int length;
    struct PrintJob *next;
} PrintJob;

// Define the structure for the printer queue
typedef struct {
    PrintJob *front;
    PrintJob *rear;
} PrinterQueue;

// Function to create a new print job
PrintJob* createPrintJob(int jobId, int length) {
    PrintJob *newJob = (PrintJob*)malloc(sizeof(PrintJob));
    if (newJob == NULL) {
        printf("Memory allocation failed!\n");
        exit(1);
    }
    newJob->jobId = jobId;
    newJob->length = length;
    newJob->next = NULL;
    return newJob;
}

// Function to initialize the printer queue
void initializeQueue(PrinterQueue *queue) {
    queue->front = queue->rear = NULL;
}

// Function to check if the queue is empty
int isEmpty(PrinterQueue *queue) {
    return (queue->front == NULL);
}

// Function to enqueue a print job into the queue
void enqueue(PrinterQueue *queue, PrintJob *job) {
    if (isEmpty(queue)) {
        queue->front = queue->rear = job;
    } else {
        queue->rear->next = job;
        queue->rear = job;
    }
}

// Function to dequeue a print job from the queue
PrintJob* dequeue(PrinterQueue *queue) {
    if (isEmpty(queue)) {
        printf("Queue is empty, cannot dequeue!\n");
        exit(1);
    }
    PrintJob *temp = queue->front;
    queue->front = queue->front->next;
    if (queue->front == NULL) {
        queue->rear = NULL;
    }
    return temp;
}

// Function to print the contents of the queue
void printQueue(PrinterQueue *queue) {
    if (isEmpty(queue)) {
        printf("Queue is empty!\n");
        return;
    }
    printf("Printer Queue:\n");
    PrintJob *current = queue->front;
    while (current != NULL) {
        printf("Job ID: %d, Length: %d\n", current->jobId, current->length);
        current = current->next;
    }
}

int main() {
    PrinterQueue printerQueue;
    initializeQueue(&printerQueue);

    // Example: Enqueue some print jobs
    enqueue(&printerQueue, createPrintJob(1, 5));
    enqueue(&printerQueue, createPrintJob(2, 3));
    enqueue(&printerQueue, createPrintJob(3, 7));
    enqueue(&printerQueue, createPrintJob(4, 2));

    // Print the contents of the queue
    printQueue(&printerQueue);

    // Example: Dequeue and print a job
    PrintJob *processedJob = dequeue(&printerQueue);
    printf("Processing Job: ID %d, Length %d\n", processedJob->jobId, processedJob->length);
    free(processedJob);

    // Print the updated contents of the queue
    printQueue(&printerQueue);

    return 0;
}

